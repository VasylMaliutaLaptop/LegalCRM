@page "/login"
@attribute [AllowAnonymous]
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using LegalCRM.Shared.Contracts
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient Http
@inject IJSRuntime JS
@inject AuthenticationStateProvider? AuthStateProvider
@inject NavigationManager Nav

<h3>Вход</h3>

<EditForm Model="@_loginDTO" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>Имя пользователя</label>
        <InputText @bind-Value="_loginDTO.UserName" />
    </div>
    <div>
        <label>Пароль</label>
        <InputText @bind-Value="_loginDTO.Password" type="password" />
    </div>
    <button type="submit" disabled="@busy">Войти</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}

@code {
    private LoginDTO _loginDTO = new();
    private string? message;
    private bool busy;
    private string? returnUrl;

    [CascadingParameter] private Task<AuthenticationState> AuthTask { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthTask).User;
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        returnUrl = query.TryGetValue("returnUrl", out var v) ? v.ToString() : "/"; // запасной путь — домашняя[7]
        if (user.Identity?.IsAuthenticated == true)
        {
            Nav.NavigateTo("/", forceLoad: true);
        }
        if (user.Identity?.IsAuthenticated == true)
            Nav.NavigateTo("/", forceLoad: true);
    }
    private async Task HandleLogin()
    {
        try
        {
            busy = true;
            message = null;

            var resp = await Http.PostAsJsonAsync("api/account/login", _loginDTO);
            if (!resp.IsSuccessStatusCode)
            {
                message = await resp.Content.ReadAsStringAsync();
                if (string.IsNullOrWhiteSpace(message)) message = "Ошибка входа";
                return;
            }

            var auth = await resp.Content.ReadFromJsonAsync<AuthResponseDTO>();
            if (auth is null || string.IsNullOrWhiteSpace(auth.AccessToken))
            {
                message = "Некорректный ответ сервера";
                return;
            }

            // сохранить токен (sessionStorage)
            await JS.InvokeVoidAsync("sessionStorage.setItem", "authToken", auth.AccessToken); // JS interop нужен через IJSRuntime[5][9]

            // добавить заголовок Authorization по умолчанию
            Http.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", auth.AccessToken);

            // уведомить провайдер аутентификации (если используется кастомный JwtAuthStateProvider)
            if (AuthStateProvider is JwtAuthStateProvider jwtProvider)
                await jwtProvider.MarkUserAsAuthenticated(auth.AccessToken);
            Nav.NavigateTo(returnUrl ?? "/");
        }
        finally { busy = false; }
    }
}
