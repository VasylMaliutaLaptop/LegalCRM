@page "/register"
@attribute [AllowAnonymous]
@using System.Net.Http.Json
@using LegalCRM.Shared.Contracts
@using LegalCRM.Shared.User
@inject HttpClient Http
@inject NavigationManager Nav

<h3>Регистрация пользователя</h3>

<EditForm Model="@_createUserDto" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Имя пользователя:</label>
        <InputText @bind-Value="_createUserDto.UserName" />
    </div>
    <div>
        <label>Email:</label>
        <InputText @bind-Value="_createUserDto.Email" type="email" />
    </div>
    <div>
        <label>Пароль:</label>
        <InputText @bind-Value="_createUserDto.Password" type="password" />
    </div>

    <button type="submit" disabled="@_busy">Зарегистрироваться</button>
</EditForm>

@if (!string.IsNullOrEmpty(_message))
{
    <p>@_message</p>
}

@code {
    private CreateUserDto _createUserDto = new();
    private string? _message;
    private bool _busy;

    private async Task HandleRegister()
    {
        try
        {
            _busy = true;
            _message = null;

            var resp = await Http.PostAsJsonAsync("api/account/register", _createUserDto);
            if (resp.IsSuccessStatusCode)
            {
                // при успехе — перейти на логин или на returnUrl при наличии
                var uri = Nav.ToAbsoluteUri(Nav.Uri);
                var q = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
                var returnUrl = q.TryGetValue("returnUrl", out var v) ? v.ToString() : "/login";
                Nav.NavigateTo(returnUrl);
            }
            else
            {
                var error = await resp.Content.ReadAsStringAsync();
                _message = string.IsNullOrWhiteSpace(error) ? "Ошибка регистрации" : $"Ошибка регистрации: {error}";
            }
        }
        finally { _busy = false; }
    }
}
